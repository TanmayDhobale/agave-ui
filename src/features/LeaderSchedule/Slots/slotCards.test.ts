import { expect, describe, it } from "vitest";
import { Epoch } from "../../../api/types";
import { getSlotCards, getSlotType } from "./slotCards";
import { slotsPerLeader } from "../../../consts";
import { SlotType } from "./types";

// #region test data
const epoch: Epoch = {
  start_slot: 324092256,
  end_slot: 324524255,
  epoch: 763,
  leader_slots: [
    4, 178, 5, 3, 1, 142, 1315, 1257, 403, 3, 98, 1509, 719, 3039, 1489, 2889,
    2256, 2, 758, 4, 1832, 187, 2565, 2, 2662, 119, 4, 3189, 3241, 7, 3, 0,
    1207, 118, 17, 2709, 249, 2408, 176, 98, 2966, 131, 4, 31, 6, 98, 8, 459,
    3139, 2520, 114, 464, 2, 149, 141, 159, 17, 1633, 82, 190, 2563, 87, 522,
    2223, 54, 84, 0, 108, 48, 20, 1470, 41, 1700, 16, 125, 3, 598, 1, 7, 2081,
    125, 11, 2771, 2, 107, 1894, 141, 1368, 1948, 72, 110, 6, 2, 2263, 0, 3064,
    6, 4, 4, 1, 70, 1, 121, 1581, 201, 1, 2871, 105, 2478, 0, 78, 823, 13, 9,
    2204, 57, 18, 548, 25, 2040, 140, 26, 21, 969, 2960, 35, 17, 103, 56, 2853,
    144, 208, 12, 0, 9, 0, 0, 582, 1, 16, 1, 4, 13, 477, 0, 5, 3, 11, 27, 45,
    2653, 145, 4, 57, 2, 0, 1932, 3, 2637, 1348, 1, 4, 27, 0, 243, 1457, 818, 4,
    9, 96, 182, 1503, 6, 27, 3274, 1, 43, 2520, 2451, 453, 0, 125, 1711, 63, 4,
    2523, 17, 141, 63, 12, 1, 2, 118, 1, 37, 2648, 1032, 92, 1911, 2611, 352, 1,
    413, 129, 2460, 504, 4, 4, 74, 1248, 83, 2, 20, 466, 1892, 62, 24, 59, 71,
    0, 45, 379, 2, 12, 2040, 5, 114, 0, 3, 1845, 2799, 148, 16, 25, 1, 57, 2025,
    683, 5, 526, 41, 191, 28, 111, 96, 2552, 60, 2590, 1914, 20, 205, 579, 114,
    440, 1, 2763, 867, 0, 2238, 264, 177, 5, 0, 2632, 65, 28, 74, 3, 9, 63,
    2190, 39, 5, 1, 3, 1230, 1701, 4, 173, 4, 0, 1, 13, 2127, 4, 1378, 2582,
    1546, 156, 21, 23, 7, 0, 5, 87, 3153, 2071, 2, 0, 302, 765, 0, 0, 2331, 17,
    4, 494, 2704, 2753, 1109, 2, 788, 0, 2731, 2625, 138, 1448, 1, 3004, 196, 8,
    146, 99, 13, 2526, 5, 27, 115, 107, 3, 13, 1724, 2, 56, 111, 3, 120, 1140,
    53, 1, 1294, 604, 804, 113, 0, 1, 1, 130, 11, 14, 3, 4, 0, 2, 175, 1253, 4,
    51, 2451, 30, 961, 463, 67, 969, 11, 89, 1, 1094, 25, 2, 30, 1, 2381, 1, 42,
    2604, 4, 2366, 0, 0, 1248, 107, 0, 0, 246, 3125, 2678, 4, 2, 96, 2, 94, 128,
    269, 129, 2, 512, 14, 142, 5, 2094, 3, 705, 335, 2, 2880, 49, 239, 145,
    2510, 2359, 378, 46, 1259, 42, 6, 20, 3, 5, 27, 2328, 11, 1538, 1280, 3, 1,
    902, 1426, 101, 66, 120, 57, 26, 1, 140, 130, 136, 2, 70, 273, 1405, 102,
    1028, 2797, 2703, 127, 9, 402, 400, 448, 0, 0, 19, 938, 503, 99, 1, 1184,
    129, 25, 648, 1054, 0, 0, 2, 71, 13, 21, 10, 618, 107, 2089, 11, 18, 3, 2,
    127, 13, 0, 10, 0, 1, 2605, 1582, 81, 4, 2386, 90, 6, 49, 289, 124, 1711,
    1648, 152, 2182, 2, 1395, 1889, 2593, 2030, 46, 35, 1, 388, 32, 56, 0, 1034,
    1, 4, 125, 59, 96, 2, 85, 4, 2, 4, 112, 2, 73, 1, 0, 0, 663, 45, 8, 75, 27,
    0, 1225, 26, 43, 3, 67, 28, 2, 2, 1082, 58, 95, 1167, 3006, 4, 2, 93, 3,
    701, 90, 887, 3, 108, 185, 291, 3, 23, 2092, 2838, 3, 7, 926, 60, 103, 38,
    13, 37, 1682, 3, 1, 0, 85, 66, 0, 91, 675, 84, 6, 142, 4, 1141, 4, 111, 891,
    0, 8, 2282, 1009, 3, 4, 3, 61, 1523, 111, 1619, 43, 132, 480, 0, 1674, 1682,
    3202, 5, 1774, 54, 1579, 0, 2, 9, 44, 111, 3, 0, 201, 1280, 10, 4, 9, 0, 43,
    520, 1937, 0, 2, 88, 16, 524, 4, 11, 128, 1781, 0, 20, 38, 75, 9, 4, 0, 41,
    4, 1728, 58, 71, 27, 1815, 823, 78, 0, 155, 167, 20, 48, 2, 18, 2, 80, 1,
    1717, 166, 158, 324, 234, 55, 0, 13, 96, 727, 1103, 34, 1133, 2, 63, 1,
    2412, 82, 2274, 1, 178, 9, 421, 1333, 0, 2244, 0, 2, 2, 4, 1138, 5, 218, 14,
    82, 252, 78, 1901, 3094, 41, 3, 2, 190, 1035, 2, 3024, 0, 6, 643, 2786,
    2708, 418, 581, 5, 1419, 4, 226, 4, 143, 167, 419, 0, 2, 105, 14, 0, 12,
    1067, 56, 1253, 1293, 639, 772, 1087, 841, 22, 6, 10, 674, 1, 3, 1, 1026,
    62, 481, 246, 51, 16, 1085, 157, 753, 2279, 164, 1798, 1778, 52, 11, 684,
    393, 4, 907, 18, 2, 160, 1369, 163, 3, 72, 431, 1988, 3213, 2424, 32, 97,
    2646, 0, 19, 89, 3, 2841, 2, 62, 62, 97, 2, 494, 2556, 170, 52, 810, 145,
    2094, 2, 2848, 0, 3, 20, 28, 1, 2036, 3073, 58, 3, 25, 3147, 9, 172, 57,
    828, 3080, 162, 2, 9, 1, 40, 1, 55, 612, 49, 23, 15, 1432, 20, 70, 1, 78,
    32, 385, 60, 63, 35, 409, 268, 59, 2, 1, 135, 0, 4, 1, 1155, 3, 32, 2477,
    210, 2903, 18, 22, 0, 1862, 678, 129, 30, 103, 1, 1, 5, 1400, 3, 93, 2, 25,
    44, 73, 825, 1202, 85, 3, 95, 20, 57, 7, 2918, 2511, 121, 26, 2898, 2725, 2,
    222, 241, 12, 1859, 2534, 57, 162, 1509, 13, 1060, 32, 4, 25, 1493, 20,
    1067, 303, 12, 318, 0, 12, 14, 2180, 53, 141, 2573, 1104, 2, 820, 1678, 38,
    4, 142, 2, 1, 826, 0, 32, 120, 1792, 330, 4, 1, 1550, 1, 3000, 2983, 0, 2,
    156, 267, 20, 97, 752, 1, 305, 24, 2797, 2095, 2812, 1638, 52, 72, 2398,
    133, 501, 3046, 1102, 73, 0, 1123, 27, 136, 9, 91, 94, 24, 515, 2672, 254,
    264, 2825, 0, 76, 3, 66, 0, 2980, 91, 1858, 126, 0, 80, 108, 839, 30, 16, 3,
    139, 2, 0, 164, 82, 1, 57, 81, 123, 1205, 10, 3027, 154, 79, 3153, 3, 6, 26,
    1719, 431, 1263, 1180, 2, 6, 1109, 38, 20, 4, 2, 160, 0, 1, 84, 878, 1937,
    164, 132, 8, 76, 12, 53, 6, 2257, 737, 24, 2771, 17, 2353, 2834, 94, 2, 16,
    3, 388, 2, 0, 0, 2, 2, 182, 1838, 664, 28, 2477, 112, 2, 214, 75, 2, 112, 4,
    2, 167, 12, 0, 26, 90, 1, 12, 19, 7, 3, 27, 28, 2965, 1944, 63, 59, 48, 0,
    0, 2, 337, 2568, 56, 3, 690, 702, 675, 108, 105, 5, 2247, 21, 45, 101, 79,
    167, 121, 834, 3, 18, 189, 3, 1482, 2309, 17, 1, 1869, 124, 56, 355, 18, 27,
    15, 2167, 0, 5, 1, 1, 14, 12, 1, 12, 138, 1226, 14, 865, 40, 11, 645, 16,
    1202, 247, 111, 61, 14, 3010, 326, 6, 130, 115, 816, 4, 1256, 79, 0, 2952,
    29, 23, 31, 322, 77, 0, 121, 94, 0, 2, 406, 388, 84, 1, 1361, 0, 12, 12, 4,
    129, 924, 18, 1459, 2536, 77, 5, 195, 148, 234, 9, 2934, 139, 22, 2718,
    3109, 1926, 183, 13, 3, 78, 2959, 12, 0, 53, 2, 58, 0, 76, 1466, 4, 2, 2937,
    0, 90, 124, 98, 37, 2461, 131, 4, 173, 128, 2013, 135, 35, 921, 23, 1, 2250,
    151, 1874, 51, 111, 380, 5, 3021, 2869, 30, 1, 1, 3079, 33, 1645, 3173, 195,
    22, 88, 818, 2, 2802, 70, 2, 136, 2754, 114, 10, 124, 125, 3, 47, 3, 33,
    328, 68, 9, 779, 32, 1, 24, 177, 541, 0, 3038, 93, 4, 75, 97, 0, 2675, 2563,
    8, 27, 2370, 287, 1087, 296, 107, 473, 3160, 25, 16, 2517, 2864, 72, 50,
    180, 1807, 292, 4, 44, 22, 2, 1763, 513, 2770, 9, 19, 0, 579, 93, 0, 1835,
    3011, 2451, 3, 4, 2, 72, 141, 23, 135, 1962, 2, 190, 4, 21, 89, 2076, 16,
    466, 1, 88, 1457, 5, 2966, 1620, 82, 3, 2325, 19, 15, 2585, 2, 3013, 767,
    94, 386, 4, 180, 1553, 13, 229, 859, 2237, 183, 0, 3, 2031, 1, 1294, 29,
    698, 16, 4, 166, 2124, 1997, 37, 124, 49, 23, 12, 3, 15, 81, 2398, 2027,
    146, 140, 105, 2, 0, 1313, 93, 132, 4, 2020, 532, 37, 2001, 1102, 117, 145,
    45, 24, 2, 19, 2247, 96, 3, 3, 15, 86, 2840, 125, 1, 43, 4, 2421, 1417,
    1448, 0, 15, 54, 57, 2912, 65, 2457, 282, 522, 2148, 1060, 1, 421, 86, 48,
    3, 2178, 1, 0, 1724, 6, 13, 25, 2419, 57, 138, 545, 129, 0, 21, 135, 1479,
    2, 648, 0, 8, 0, 155, 530, 2, 4, 68, 1301, 2, 89, 3, 17, 423, 201, 5, 31,
    64, 21, 1553, 3, 0, 2560, 2, 43, 393, 4, 107, 6, 1, 0, 31, 437, 11, 2840, 2,
    36, 99, 41, 0, 23, 43, 180, 9, 44, 26, 166, 1549, 3054, 67, 67, 0, 16, 113,
    1188, 3, 107, 100, 317, 25, 3,
  ],
  staked_pubkeys: [
    "141vSYKGRPNGieSrGJy8EeDVBcbjSr6aWkimNgrNZ6xN",
    "FT9QgTVo375TgDAQusTgpsfXqTosCJLfrBpoVdcbnhtS",
    "J7v9ndmcoBuo9to2MnHegLnBkC9x3SAVbQBJo5MMJrN1",
    "J5BJHkRuGpWwfkm1Bxau6QFge4dTausFzdgvj3vzipuv",
    "ftv4sJhKxRcESHeAh2W6RWEKzCJw5Nq7HdrhamoVbGt",
    "B8T2dbvYaM4gJfpLLbuBScuWKFhnG6KspRK72v5D5uoK",
    "t3ChqFTKHUFdjNPDf8CuhFGwkwzqR47LL7sDbeU99XD",
    "5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on",
    "testr323vRz7Et5QvgEYxd3JrCSmngHNUgpvCxjQGqr",
    "F1REirtRdV1famCks1tLZ8ZpxKWxPzT8Ky7d19cA1K1N",
    "puMPKindCwo2b279wFUTHZbR3CncfEWX5ySk2ibqQ3U",
    "mtvxq35ST4CnAiWuQeF6vLucJnNeut3wSFZs63so9jG",
    "mtvxgXNDuGUdFrVWLRQREveyViydC2h8vY2qTbapCRK",
    "7heQNXEtxSv3wV8sNbuQsDN5xNGbbpLvHGiyXuJxEf7n",
    "Ft5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN",
    "td3n5NGhP7JKWrL638gzau3NY7mF4K3ztZww3GkpywJ",
    "4UCZB7zfquCVN7GafWETFVLTceNH3nm2mndyHeDuSggC",
    "td2GGWDsCJ6LvjN89oLJvmrDwE14neNrbqQ9s3tVkPy",
    "mtvxDvucSt3puDyg7fXiMg1q9vtiASCvove92HPv5fE",
    "mtvx7uJE3NyrgFmePfcusTzpjj9HQhNDW9dkzPudvxX",
    "F1jcLYJ1s8k4oYVy51J2RvYGh4sB1kWsUB2NaDrg6ejL",
    "Can7hzmTxAuBBtaaMDCMPWwyYxMJLuXd5YVmPEDBTs1J",
    "2Nnw9RZvT2qeKq74rkw8hWDJZUDSKxiBarmQMFxHzzCt",
    "E3U9iR3AcXm7WKyPm4PaWZjPKt299izPDQhVHxyePLDx",
    "2CY8VXH2jummjSmwcusSj2jGMiaHE4eo7WQ9LScxykvt",
    "f1x5NQFQJxXVZWoig2VWeqDhx3D3oLzbDTrDsXVsKbD",
    "ftvyBVP3Hb5GPVH6yoMcaWRxMVQsF1a24pPUNuJL4qw",
    "6ZEbKFxTjEKGC9HUqzy9z4ccJ8Aq3ktPKEzHGDosQJo4",
    "D71JRzjPpHipt8NAWnWb3yZoXezbkGXqSf7TVCir6wvT",
    "2ZZkgKcBfp4tW8qCLj2yjxRYh9CuvEVJWb6e2KKS91Mj",
    "Dg5E8ktH4GWfKL1vuVTdqZJEkAEgtV8LqmSXyLJuZ3q1",
    "ftvA1m6D5PtkkhMLyP4mnVpR5n7do37q11rzaJmx2Ya",
    "5qzgRKGnpZs27aqR3tkZp2HJ8ZXoxTBjYoayqVG1QKbs",
    "Hwvxg5dacM8SbpwPDiZyxNNLpAid9v7BQZDef1Fhug2P",
    "CnwQFPxFz17VuMqaPjmF2CWQumDxCKGa26d9yReHim2q",
    "9cZua5prTSEfednQQc9RkEPpbKDCh1AwnTzv3hE1eq3i",
    "4eDS5fB3keUA5qxwphZaCDGUqfrmZSry1E2t9bjzUPHS",
    "5TkrtJfHoX85sti8xSVvfggVV9SDvhjYjiXe9PqMJVN9",
    "ARhax8ZwKr4xTkRB4HcU5ncWtGoVXCbCa2x98QhTpihw",
    "8SQEcP4FaYQySktNQeyxF3w8pvArx3oMEh7fPrzkN9pu",
    "EuckMiP2ZFiQPc1nfBE54arXMoDch62AcTbZYHnzjkne",
    "GRD4cpy2j7f6u15jQXpvwcPCetrabEx6RKdVqj7NSBe8",
    "ftv5SNk5123xopjontQGdtU4mRRcXkVWcP22KRqnaTe",
    "ftvV6HjY4zV4MRkLRFk8y5vXTUYd6QFMHoshqq3Szvh",
    "ftvTs9XZCfkexQzpXKocrifY68p6JSXCuGdThvGSL1p",
    "ftvTrEYqy8qpXJ4otEyvi5vCjcvSvs1rQvDgEwBjeuo",
    "ftvTnhZY6AYF5MKUWLo5XKLSaX2ijmn17NzTPMs4q7T",
    "ftvSmmZpeee4dDCgj39Y8tCjCYcRh3v1kqhv9nYKZW1",
    "ftvRzeBKtWKvsf3kBc28rb27bna6RzGLgFytC5UCu5i",
    "ftvRBHpci2yrgoZgivMoVUzsKiFnv5pLjCvyfC7oki9",
    "ftvQdmcZNTuANKkBnsdQu8Dqjdy23DBzwATKzufqPXF",
    "ftvQWJwptJibaxnfUauPKWqmRFfsj4ytA554xPwyDYc",
    "ftvQCihs8QAvdsiUVct8L3Uwh7KdjoCcBf9iZ3kLtbu",
    "ftvQ7jKYGcaaSfkdV9mjpCQiYi4wFjpg6Rkrqwv6fVX",
    "ftvPJsyPci6HqcvL9if5fxWE31UCDkpM7GntfSvvA3L",
    "ftvLhCznWsLLDPtNv3ehcG298gViQmz8xP8hmf4exDK",
    "ftvLgPkw24KYN4fD6bKWANsJPNDuhykTCJFYgzZnqBN",
    "ftvLAjG5VEm67tqU1KVeL3Cv5eStLWcvuH9g2AegMgC",
    "ftvJvJPzsgNq7BMWz8XiwKyXY9WCiWy387SThRCxtVo",
    "ftvHdEPj4gKgAbRocsWkLzAFqUnXHg2vGKjdqBMXSPY",
    "ftvHZyANNJfzKmPbMoBPvHusZtHTTxnmnB4LCixCVu6",
    "ftvHWQN2YKx5yWkkSBTkLmFM7RDrn8tyHrnfup4zQsP",
    "ftvHSshcbHvcMUawWvtq7sVoTsXYHDiJct9oy4mvH6Q",
    "ftvGart2zwyS1h8cJtnV8wTv3zHJHfVnUvg4yFmGCiW",
    "ftvFsoC7K2z92PbaX1Dcah9qeqm92GKLu15GeJJMibf",
    "ftvExjeamLoquZgqhb8Es5Ck5ivgGzh6aASX9WgPwGV",
    "ftvE5Hkp6FQe79FJVbwtsu44fnGnVrKzCmVXt6DWk25",
    "ftvDkddMqF5f2X2k8SsAyZzKPxAgJPbUapgqT8tDJNj",
    "ftvDiUyTEmk472TVkT5kb8w4W19HrHf1EpPZ8cUMvue",
    "ftvDSGhcu76VKgn82AC1Aan2sBrXV2apbnw1StKdpv8",
    "ftvDCypwhzChNNHTUesTww6jpxre5kn9kX8jCEaB5Tv",
    "ftvA2mD4E2RK9tjhq4pGapB7HACabCC6NNmNdDRFBeL",
    "ftv9qWHJ1uSMKmMrqBs9kuzc5LS2d7fi5MLwsd3ZKSG",
    "ftv922mwfs5UwJVY9MDHuH99jKicA3AtXszXjZLQcAh",
    "ftv6hQ1FeKALrgosQvhsHCyQbTj5MYh8qJErua6fgTj",
    "ftv6EunPnmuzgyqTHnnTQUT7jchHCUdztQkFvqeDdCU",
    "ftv5aWPj5He8fbfKwskozYSwMvAFfVsuJhxxdRprmmW",
    "ftv57swkKeLYEnU34Bvq2yuhwoVQvsdVcXwnYHjPN2S",
    "ftv3YXETRf3ZUkSnTaYXQv8Gjwcg3dERLfZ6HepY4mD",
    "ftv2rTJc8iMjYu9Qj2ALdQQEd3zEqx7krCv4iCdbZxr",
    "ftv2cymu4ihwGqNVm9aJrmfapiMiAg6K2Qbrg4H6uQC",
    "ftv2AwqaK87gFoY9SgySuPjjdFeZha97R3N3m2bjbcM",
    "ftv28xqVtvs3aHQRyJHNuaBxvrq4irXKQitUsgSnwSE",
    "ftv195eCfVGpj4DSbF62w8eEyTcHiqoj4ktKQGs1vCZ",
    "ftv18WQJKN7J3Zxdx1PB8HprdbG5qZqsy5wiZjLi7sN",
    "DRnvWydSjzDkhN1AsZ5oTm8nqNCmxtCxJ8T1sXk5kCmb",
    "J5e4xh1V7zGZnHq9rYfsowFJghoc9SEZWFfiCdbc8FF1",
    "4ECwQYdgfcDfFT2Qkboe591xJKTMBeXt5dAizzuSWzVr",
    "vawktMPYeGD5aZhfXBeipw6GDvB7YUJH7fkkKjCmHva",
    "HEbMY624UhDGm1Qhy6neKSyi3bQjQ2RidSTyt7ARK8RW",
    "ftvVQoCwXzBxUPkFcpG1xAdxN4zQCHU4A8ktGSaGUL3",
    "ftvTStwmHi1iajB2uzjaAyTpLM5h2yqAztNxeMuu5tV",
    "9P5sFULhNktpQxEST2Wiw6zBH4aJrANCjui8k5FhwcjH",
    "BNa6rYkNdwWpXSzPTL8yf8tiCZ4DqzT5orRh2j7GuWB9",
    "ftvYEJHsEHwe96fzzZDcB4FLUEGGJ5DK4VUqJ11JmFt",
    "ftvhEBtDbSJvP58MaP4cnRid8zQHBpKuQhpubqf7nUR",
    "ftvxzgi859maBu7wAPFMabqz2b8tQtGRbU2tQAexBYC",
    "ftvxmtUHUfpL2TmTDXdX6bLS6DBg5v4JJFuSF45ddd1",
    "ftvxNuaNGBMts9iS8CEmd1TYDzX72Gd4ikT7jBB9JDv",
    "ftvuiomtpNHGGiTQyaNcQyoRjeSoyfoKWQXZ6tbjNHf",
    "ftvuBKcJ4yfpvSCGbyxVywgHhAsFEBCpvSeCHwzL4hu",
    "ftvtxRGr9yke92TvjqewMERYSx8ry5wdJejXatPnuxC",
    "ftvttykpwD2wvgQ16TJWgWNKAykAjebKkChmGFUtedp",
    "ftvtgUsNTN3opQyvsjbLGVBQ3orLbYPSL2FpViFo1Le",
    "ftvtgGUonJrLcXhozhA64kGELUAzbhHa4is1FZ8DMqs",
    "ftvtXx6ToMmzyXTuqAHShWRzkWLVngKTEyT2M41QXYe",
    "ftvsm4WoYYZ9UaL2UDeosyt8ygjCQHtRMctFYuvXxbA",
    "ftvsitdEYSDjvJB55WofYVGRwZjYCzqUKD3hhumGe",
  ],
  staked_lamports: [
    22971175929117132, 17457587017065350, 16982715678964416, 13598265988210532,
    10129999990868480, 4218312186844856, 3043299132323331, 2600122588302720,
    2308056082350917, 2079507963473920, 2050099988585600, 2049999995434240,
    2049999995434240, 2010006997717120, 2002669429692160, 2000003995424240,
    2000002995434240, 2000000997717120, 1999999997717120, 1999999997717120,
    1984813009828052, 1887691096216094, 1720999995434240, 1650001995434240,
    1570100020010000, 1560049993151360, 1506999990868480, 1495758175448051,
    1449911162327165, 1422028374661265, 1253910008092549, 1220001990868480,
    1080001995434240, 1070005993151360, 1055980504737243, 1045387723789974,
    1043356509342545, 1042170726988647, 1004751434823960, 841111528401372,
    837370936226175, 755975301575930, 720000993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 719999993151360, 719999993151360, 719999993151360,
    719999993151360, 710520523040089, 687962634409452, 674814853877260,
    633367511097111, 616273131210518, 579999995434240, 579999995434240,
    577144818627191, 575791785478431, 507001493151360, 507000993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 506999993151360,
    506999993151360, 506999993151360, 506999993151360, 499999997717120,
    367009995434240, 340993077109704, 337235835735644, 319050686461165,
    304704397313960, 299403976647231, 298250668198125, 291341651397804,
    283943265358172, 279531377459377, 278362156832974, 275403978930112,
    241651159933614, 240551389501035, 237499988585600, 237337672426795,
    228875438853556, 228494511678882, 225749979464080, 223005881212990,
    218000000000000, 215733390441732, 212401268047137, 208512138904331,
    201198858433975, 194917663062097, 194682668783738, 189667116638673,
    174999997717120, 173340468250707, 172000000000000, 170391055690014,
    169711438573266, 169543612712897, 166980463684947, 163446979647932,
    163044521258503, 152415617959056, 150049995434240, 150000000000000,
    147182295724578, 143472995354240, 128864942845317, 128376172445316,
    126556162553079, 124435918314388, 121831402466013, 118258224176341,
    117578615573996, 117483027069632, 117355692003131, 117355275995598,
    116542150585600, 115570035554073, 112988686569678, 112468997582139,
    111590137907003, 109624857882178, 108887157217063, 108354252317955,
    105822710978781, 105353495645266, 104354226744699, 103044504874532,
    101442639355259, 101359484149814, 100620653723232, 100001495434240,
    99999997717120, 99999997717120, 99999997717120, 98635113400428,
    98426231005943, 98353752085135, 91810255732558, 91333491079507,
    89660092007954, 88999997717120, 88490530688969, 88367292186066,
    87266925424295, 85999997717120, 85400918839070, 84118669764442,
    83400151903138, 83353513908305, 81739025766746, 81404202652351,
    80853579761171, 80298383703867, 79456043585746, 79356020756945,
    78603124285976, 78458693266122, 78457407138799, 78401056649638,
    78384220676136, 78359511337547, 78356451605860, 78354072650720,
    78353726329206, 78353518474065, 78353518474065, 78149993151360,
    77452794207283, 77051686461165, 76299978317213, 75689996781854,
    75677598574723, 74003495434240, 73356260298318, 73323967042631,
    72986366692078, 72965460122123, 72554964463507, 72399318553377,
    70941420490738, 70353643585748, 70059589471417, 69616031866517,
    69488171791852, 69038810144556, 68960727607420, 68571772901819,
    68553625020970, 68357201679599, 68244761324584, 68053477382225,
    68004258015438, 67620443664878, 67469493901658, 67443093760369,
    67174299511048, 66353720090763, 65842674138940, 65486450178345,
    65032971888336, 64493266047136, 64436732460248, 64407219942639,
    64196372594042, 63819806189652, 63721353283420, 63654300035075,
    62750131107838, 62683703500406, 62403136448830, 62173169508972,
    61739992216094, 61650289934669, 61587194855397, 61353484230865,
    61353459119186, 61327889609773, 61126144049855, 60634598705831,
    60480490512650, 60404515575066, 60001995434240, 59999997717120,
    59999997717120, 59999995434240, 59849615889452, 59702510121366,
    59153747519376, 58798390552507, 58793461402065, 58760544771975,
    58713526077066, 58549685327415, 58549478471013, 58548855802157, 584,
  ],
  excluded_stake_lamports: 0,
};

const currentLeaderSlot = 324453380;
const cardCount = 7;

// #endregion

function getSlotGroups({
  topSlot,
  cardCount,
  epoch,
}: {
  topSlot: number;
  cardCount: number;
  epoch: Epoch;
}) {
  const slots = [];
  for (let i = 0; i < cardCount; i++) {
    const slot = topSlot - i * slotsPerLeader;
    if (slot < epoch.start_slot || slot > epoch.end_slot) break;
    slots.push(slot);
  }

  return slots.reduce<{ upcoming: number[]; now: number[]; past: number[] }>(
    (grouped, slot) => {
      const slotType = getSlotType(slot, currentLeaderSlot);
      if (slotType === SlotType.Upcoming) {
        grouped.upcoming.push(slot);
      }

      if (slotType === SlotType.Now) {
        grouped.now.push(slot);
      }

      if (slotType === SlotType.Past) {
        grouped.past.push(slot);
      }
      return grouped;
    },
    { upcoming: [], now: [], past: [] },
  );
}

describe("slotCards", () => {
  it("live view", () => {
    const topSlot = 324453392;

    expect(
      getSlotCards({
        cardCount,
        currentLeaderSlot,
        epoch,
        topSlot,
        searchLeaderSlots: undefined,
        slotOverride: undefined,
      }),
    ).toEqual(getSlotGroups({ topSlot, cardCount, epoch }));
  });

  it("end of epoch", () => {
    const slotOverride = epoch.end_slot - slotsPerLeader + 1;
    const topSlot = slotOverride;

    expect(
      getSlotCards({
        cardCount,
        currentLeaderSlot,
        epoch,
        topSlot,
        searchLeaderSlots: undefined,
        slotOverride,
      }),
    ).toEqual(getSlotGroups({ topSlot, cardCount, epoch }));
  });

  it("start of epoch", () => {
    const slotOverride = epoch.start_slot;
    const topSlot = slotOverride;

    expect(
      getSlotCards({
        cardCount,
        currentLeaderSlot,
        epoch,
        topSlot,
        searchLeaderSlots: undefined,
        slotOverride,
      }),
    ).toEqual(getSlotGroups({ topSlot, cardCount, epoch }));
  });

  it("slot search", () => {
    const slotOverride = epoch.start_slot;
    const topSlot = slotOverride;

    expect(
      getSlotCards({
        cardCount,
        currentLeaderSlot,
        epoch,
        topSlot,
        searchLeaderSlots: undefined,
        slotOverride,
      }),
    ).toEqual(getSlotGroups({ topSlot, cardCount, epoch }));
  });
});
